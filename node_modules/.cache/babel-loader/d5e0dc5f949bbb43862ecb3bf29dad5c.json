{"ast":null,"code":"var _jsxFileName = \"/Users/bimals/Desktop/module-4-recap/m4-d7hooks/src/components/CommentArea.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { Spinner, Alert } from 'react-bootstrap';\nimport AddComment from './AddComment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CommentArea = ({\n  asin\n}) => {\n  _s();\n\n  // state={\n  //     comment:[],\n  //     isLoading: false,\n  //     isError: false\n  // }\n  const [comment, setComment] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  useEffect(() => {\n    getComments = async () => {\n      // this.setState({\n      //     isLoading: true\n      //   })\n      setIsLoading(true);\n\n      try {\n        const response = await fetch(\" https://striveschool-api.herokuapp.com/api/comments/\" + asin, {\n          headers: {\n            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MGRjNzMzNGIzNTgxNzAwMTVjMjI3NWIiLCJpYXQiOjE2Mjk5NzkzNzUsImV4cCI6MTYzMTE4ODk3NX0.8oPWQmDkjhZppxF1O_JjqR5vYAfRMCIn_4zUs7p9_OM\"\n          }\n        });\n\n        if (response.ok) {\n          const data = await response.json();\n          console.log(data); // this.setState({\n          //     comment:data,\n          //     isLoading: false,\n          //     isError: false\n          // })\n\n          setComment(data);\n          setIsLoading(false);\n          setIsError(false);\n        }\n      } catch (err) {\n        // this.setState({\n        //     isLoading: false,\n        //     isError: true\n        //   })\n        setIsError(true);\n        setIsLoading(false);\n      }\n    };\n\n    getComments();\n  }, [asin]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ml-2\",\n      children: /*#__PURE__*/_jsxDEV(Spinner, {\n        animation: \"border\",\n        variant: \"success\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 21\n    }, this), isError && /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"warning\",\n      children: [\"Cannot load the data: \", isError]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }, this), comment.map(c => {\n      return /*#__PURE__*/_jsxDEV(\"ul\", {\n        style: {\n          border: '1px solid black'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: c.comment\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Rating : \", c.rate]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this)]\n      }, c._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 27\n      }, this);\n    }), asin && /*#__PURE__*/_jsxDEV(AddComment, {\n      asin: asin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true);\n};\n\n_s(CommentArea, \"gtaniviP4EkHAD+20/UOZ3R7XPk=\");\n\n_c = CommentArea;\nexport default CommentArea;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentArea\");","map":{"version":3,"sources":["/Users/bimals/Desktop/module-4-recap/m4-d7hooks/src/components/CommentArea.jsx"],"names":["useEffect","useState","Spinner","Alert","AddComment","CommentArea","asin","comment","setComment","isLoading","setIsLoading","isError","setIsError","getComments","response","fetch","headers","ok","data","json","console","log","err","map","c","border","rate","_id"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,QAAT,QAAyB,OAAzB;AAEA,SAAQC,OAAR,EAAgBC,KAAhB,QAA4B,iBAA5B;AAEA,OAAOC,UAAP,MAAuB,cAAvB;;;;AAIA,MAAMC,WAAW,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAW;AAAA;;AAC3B;AACA;AACA;AACA;AACA;AAEF,QAAM,CAACC,OAAD,EAASC,UAAT,IAAuBP,QAAQ,CAAC,EAAD,CAArC;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACU,OAAD,EAASC,UAAT,IAAuBX,QAAQ,CAAC,KAAD,CAArC;AAEAD,EAAAA,SAAS,CAAC,MAAI;AAEZa,IAAAA,WAAW,GAAG,YAAW;AAClB;AACP;AACA;AACAH,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,UAAI;AACA,cAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,0DAA0DT,IAA3D,EAAgE;AACxFU,UAAAA,OAAO,EAAC;AACJ,6BAAiB;AADb;AADgF,SAAhE,CAA5B;;AAMA,YAAGF,QAAQ,CAACG,EAAZ,EAAe;AACX,gBAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ,EAFW,CAGX;AACA;AACA;AACA;AACA;;AACAV,UAAAA,UAAU,CAACU,IAAD,CAAV;AACAR,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,UAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACJ,OAnBD,CAmBE,OAAOU,GAAP,EAAY;AAEV;AACA;AACA;AACA;AACAV,QAAAA,UAAU,CAAC,IAAD,CAAV;AACAF,QAAAA,YAAY,CAAC,KAAD,CAAZ;AAEH;AACA,KAlCD;;AAmCAG,IAAAA,WAAW;AACZ,GAtCQ,EAsCP,CAACP,IAAD,CAtCO,CAAT;AAwCM,sBACI;AAAA,4BAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFA,EAGCG,SAAS,iBACF;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,6BACI,QAAC,OAAD;AAAS,QAAA,SAAS,EAAC,QAAnB;AAA4B,QAAA,OAAO,EAAC;AAApC;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAJR,EAQEE,OAAO,iBACL,QAAC,KAAD;AAAO,MAAA,OAAO,EAAC,SAAf;AAAA,2CAC2BA,OAD3B;AAAA;AAAA;AAAA;AAAA;AAAA,YATJ,EAcIJ,OAAO,CAACgB,GAAR,CAAYC,CAAC,IAAG;AACb,0BAAO;AAAgB,QAAA,KAAK,EAAE;AAACC,UAAAA,MAAM,EAAC;AAAR,SAAvB;AAAA,gCACF;AAAA,oBAAKD,CAAC,CAACjB;AAAP;AAAA;AAAA;AAAA;AAAA,gBADE,eAEF;AAAA,kCAAciB,CAAC,CAACE,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFE;AAAA,SAASF,CAAC,CAACG,GAAX;AAAA;AAAA;AAAA;AAAA,cAAP;AAIF,KALD,CAdJ,EAyBCrB,IAAI,iBAAI,QAAC,UAAD;AAAY,MAAA,IAAI,EAAEA;AAAlB;AAAA;AAAA;AAAA;AAAA,YAzBT;AAAA,kBADJ;AA8BH,CAjFL;;GAAMD,W;;KAAAA,W;AAmFN,eAAeA,WAAf","sourcesContent":["import { useEffect } from 'react'\nimport { useState } from 'react'\n\nimport {Spinner,Alert} from 'react-bootstrap'\n\nimport AddComment from './AddComment'\n\n\n\nconst CommentArea = ({asin}) =>{\n    // state={\n    //     comment:[],\n    //     isLoading: false,\n    //     isError: false\n    // }\n\n  const [comment,setComment] = useState([])\n  const [isLoading ,setIsLoading] = useState(false)\n  const [isError,setIsError] = useState(false)\n\n  useEffect(()=>{\n\n    getComments = async () =>{\n           // this.setState({\n    //     isLoading: true\n    //   })\n    setIsLoading(true)\n    try {\n        const response = await fetch(\" https://striveschool-api.herokuapp.com/api/comments/\" + asin,{\n            headers:{\n                \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MGRjNzMzNGIzNTgxNzAwMTVjMjI3NWIiLCJpYXQiOjE2Mjk5NzkzNzUsImV4cCI6MTYzMTE4ODk3NX0.8oPWQmDkjhZppxF1O_JjqR5vYAfRMCIn_4zUs7p9_OM\"\n\n            }\n        })\n        if(response.ok){\n            const data = await response.json()\n            console.log(data)\n            // this.setState({\n            //     comment:data,\n            //     isLoading: false,\n            //     isError: false\n            // })\n            setComment(data)\n            setIsLoading(false)\n            setIsError(false)\n        }\n    } catch (err) {\n        \n        // this.setState({\n        //     isLoading: false,\n        //     isError: true\n        //   })\n        setIsError(true)\n        setIsLoading(false)\n        \n    }\n    }\n    getComments()\n  },[asin])\n       \n        return(\n            <>\n           \n            <h2>Comments</h2>\n            {isLoading && (\n                    <div className=\"ml-2\">\n                        <Spinner animation=\"border\" variant=\"success\" />\n                    </div>\n                    )}\n             {isError &&\n                <Alert variant=\"warning\">\n                    Cannot load the data: {isError}\n                </Alert>\n                }\n            {\n                comment.map(c =>{\n                   return <ul key={c._id} style={{border:'1px solid black'}}>\n                        <li>{c.comment}</li>\n                        <li>Rating : {c.rate}</li>\n                    </ul>\n                }\n               \n\n                )\n            }\n             \n            {asin && <AddComment asin={asin}/>}\n   </>\n        )\n        \n    }\n\nexport default CommentArea"]},"metadata":{},"sourceType":"module"}